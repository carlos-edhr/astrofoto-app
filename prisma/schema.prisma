// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client{ 
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

enum UserRole {
  ADMIN
  STREAMER
  USER
}

enum Plans {
  MAIN_STAGE
  STARGAZER
  FULL_ACCESS
}

model User {
  id String @id @default(uuid())
  //New fields for auth.js
  name          String?
  email         String    @unique
  emailVerified DateTime?
  username String? @unique
  image String? 
  password      String?   // Only for credentials provider
    role UserRole @default(USER)
  accounts      Account[]
    isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
stream Stream?
//New fields end here
 
  bio String? @db.Text 


  following Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

//New model for auth.js
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}



model Stream {
  id String @id @default(uuid())
  name String @db.Text
  thumbnailUrl String? @db.Text
  ingressId String? @unique 
  serverUrl String? @db.Text
  streamKey String? @db.Text
  

  isLive Boolean @default(false)
  isChatEnabled Boolean @default(true)
  isChatDelayed Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  isFree Boolean @default(true)
  price Float? 

  purchases Purchase[]


  userId String @unique 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([ingressId])


}

model Follow { 
  id String @id @default(uuid())
  followerId String
  followingId String

  follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}


model Block {
  id String @id @default(uuid())
  blockerId String 
  blockedId String 

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade )
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade )

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model SubscriptionLimit {
  id String @id @default(uuid())
  userId String @unique
  count Int @default(0)

  createdAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model UserSubscription { 
  id    String @id @default(uuid())
  userId  String @unique
  stripeCustomerId  String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId  String? @unique @map(name: "stripe_subscription")

}

model Purchase{
  id String @id @default(uuid())
  userId String 

  streamId String 
  stream Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, streamId])
  @@index([streamId])
}

model GuestPurchase{
  id String @id @default(uuid())
  plan Plans 
 
  guestEmail  String  // New field for guest email
  guestName   String  // New field for guest name
 phoneNumber String?  // New field for guest phone number
 paymentTotal Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()


}


model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New auth models

model VerificationToken { 
  id    String @id @default(cuid())
  email String
  token String @unique 
  expires DateTime

  @@unique([email, token])

}


model PasswordResetToken{
  id String @id @default(cuid())
  email String 
  token String @unique 
  expires DateTime 

  @@unique([email, token])
}


model TwoFactorToken {
  id String @id @default(cuid())
  email String 
  token String @unique 
  expires DateTime 

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}